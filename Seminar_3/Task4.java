/*
---------------------–ó–∞–¥–∞—á–∞ 4-------------------------
üìå –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–∞ ArrayList<String>.
üìå –ü–æ–º–µ—Å—Ç–∏—Ç—å –≤ –Ω–µ–≥–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∏ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.
üìå –ü—Ä–æ–π—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É, –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.
 */

// //–†–µ—à–µ–Ω–∏–µ 1 –±–µ–∑ –º–µ—Ç–æ–¥–∞
// import java.util.ArrayList;
// import java.util.Arrays;
// import java.util.List;

// public class Task4 {
//     public static void main(String[] args) {
//         List<String> list = new ArrayList<>(Arrays.asList("s1", "s2", "123", "521", "s3", "214", "s4"));
//         for (int i = 0; i < list.size(); i++) {
//             if (isNumber(list.get(i))) {
//                 list.remove(i);
//                 i--;
//             }
//         }
//         System.out.println(list); //[s1, s2, s3, s4] - –ò–∑ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞, –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Å—Ç–æ—Ä–æ–∫–∏
//     }

//     public static boolean isNumber(String str) {
//         try {
//             Integer.parseInt(str);
//             return true;
//         } catch (Exception e) {
//             return false;
//         }

//     }
// }

//–†–µ—à–µ–Ω–∏–µ 2 –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class Task4 {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>(Arrays.asList("s1", "s2", "123", "521", "s3", "214", "s4"));

        deliteNumbers(list); // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ç–æ–¥
        System.out.println(list); // [s1, s2, s3, s4] - –ò–∑ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞, –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Å—Ç–æ—Ä–æ–∫–∏

        deliteNumbersWhithIterator(list); // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ç–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä
        System.out.println(list); // [s1, s2, s3, s4] 
    }

// –ú–µ—Ç–æ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.
    private static void deliteNumbers(List<String> list) {
        for (int i = 0; i < list.size(); i++) {
            if (isNumber(list.get(i))) {
                list.remove(i);
                i--;
            }
        }
    }

// –ú–µ—Ç–æ–¥, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–¢–ï–†–ê–¢–û–†–ê, –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É, –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
    private static void deliteNumbersWhithIterator(List<String> list) {
        Iterator<String> iterator = list.iterator(); // .iterator() - –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–±–µ—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ list
                                                    // –û—Ç–ª–∏—á–∏–µ Iterator –æ—Ç Foreach, –≤ —Ç–æ–º, —á—Ç–æ —Å –ø–æ–º–æ—â—å—é Iterator –º–ª–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã,
                                                    //–∞ —Å –ø–æ–º–æ—â—å—é Foreach - –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
        while(iterator.hasNext()) {
            String str = iterator.next();
            if (isNumber(str)) {
                iterator.remove(); //.remove() - –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            }
        } 
    }

    public static boolean isNumber(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch (Exception e) {
            return false;
        }

    }
}