
/*========================–ó–∞–¥–∞–Ω–∏–µ ‚Ññ8 (–¥–æ–ø)==========================
üìå –ó–∞–¥–∞–Ω –º–∞—Å—Å–∏–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, nums = [1,7,3,6,5,6].
üìå –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–π–¥–µ—Ç –∏–Ω–¥–µ–∫—Å i (–∏–Ω–¥–µ–∫—Å —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è) –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
—Ç–∞–∫–æ–π, —á—Ç–æ —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ < i —Ä–∞–≤–Ω–∞ —Å—É–º–º–µ
—ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ > i.
 */
import java.util.ArrayList;
import java.util.List;

public class Task8_dop {
    public static void findEquilibriumIndex(int A[]) {
        // `left[i]` —Ö—Ä–∞–Ω–∏—Ç —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ `A[0...i-1]`
        int left[] = new int[A.length];

        left[0] = 0;

        // –ø–µ—Ä–µ–±—Ä–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
        for (int i = 1; i < A.length; i++) {
            left[i] = left[i - 1] + A[i - 1];
        }

        // `right` —Ö—Ä–∞–Ω–∏—Ç —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ `A[i+1...n)`
        int right = 0;

        // –≤–≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        List<Integer> indices = new ArrayList<>();

        // –ø–µ—Ä–µ–±—Ä–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
        for (int i = A.length - 1; i >= 0; i--) {
            if (left[i] == right) {
                indices.add(i);
            }
            // new right is `A[i] + (A[i+1] + A[i+2] + ‚Ä¶ + A[n-1])`
            right += A[i];
        }

        System.out.println("–†–∞–≤–Ω–æ–≤–µ—Å–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏/—è—Ö " + indices);
    }
    public static void main(String[] args) {
        int[] A = { 1, -3, 5, -4, -2, 3, 1, 0 };
        findEquilibriumIndex(A);
    }
}
